[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\nNow this works!!!!\n\n# Load Libraries \nlibrary(readxl)\nlibrary(caret)\nlibrary(rpart)\nlibrary(caretEnsemble)\nlibrary(tidyverse)\nlibrary(fastshap)\nlibrary(readr)\nlibrary(data.table)\nlibrary(mltools)\nlibrary(MLmetrics)\nlibrary(conflicted)\nlibrary(parallel)\nlibrary(doParallel)\nlibrary(here)\n\nconflicts_prefer(dplyr::filter)\n\nCheck out individual models\n\nget_best_result = function(caret_fit) {\n  best = which(rownames(caret_fit$results) == rownames(caret_fit$bestTune))\n  best_result = caret_fit$results[best, ]\n  rownames(best_result) = NULL\n  best_result\n}\n\n# set WD and load data\nProjectData &lt;- read_excel(\"DataScience_Data.xlsx\")\nnames(ProjectData)\n\n [1] \"Participant\"     \"Complex\"         \"Simple\"          \"L2\"             \n [5] \"SRT\"             \"Declearn\"        \"MLAT\"            \"DM\"             \n [9] \"Ospan\"           \"Rspan\"           \"Sspan\"           \"WM\"             \n[13] \"BAARS\"           \"ADHD\"            \"PHQ\"             \"Sex\"            \n[17] \"Age\"             \"SpokenLanguages\" \"Education\"      \n\nsummary(ProjectData)\n\n  Participant      Complex           Simple             L2        \n Min.   :4201   Min.   :0.0000   Min.   :0.1700   Min.   :0.2200  \n 1st Qu.:4317   1st Qu.:0.1700   1st Qu.:0.5800   1st Qu.:0.5000  \n Median :4401   Median :0.3300   Median :0.7500   Median :0.6100  \n Mean   :4407   Mean   :0.3552   Mean   :0.7141   Mean   :0.5948  \n 3rd Qu.:4503   3rd Qu.:0.5000   3rd Qu.:0.9200   3rd Qu.:0.6700  \n Max.   :4603   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n                                                                  \n      SRT             Declearn           MLAT             DM           \n Min.   :-0.2000   Min.   :-0.140   Min.   : 2.00   Min.   :-2.489000  \n 1st Qu.: 0.0400   1st Qu.: 1.040   1st Qu.:13.00   1st Qu.:-0.481000  \n Median : 0.0900   Median : 1.400   Median :17.00   Median : 0.089000  \n Mean   : 0.0851   Mean   : 1.307   Mean   :16.61   Mean   :-0.001092  \n 3rd Qu.: 0.1300   3rd Qu.: 1.680   3rd Qu.:20.00   3rd Qu.: 0.519000  \n Max.   : 0.3700   Max.   : 2.850   Max.   :24.00   Max.   : 1.485000  \n                                                                       \n     Ospan           Rspan           Sspan             WM       \n Min.   : 3.00   Min.   : 1.00   Min.   : 0.00   Min.   : 9.00  \n 1st Qu.:19.00   1st Qu.:19.00   1st Qu.:12.00   1st Qu.:51.00  \n Median :24.00   Median :23.00   Median :16.00   Median :63.00  \n Mean   :22.33   Mean   :21.65   Mean   :14.88   Mean   :58.71  \n 3rd Qu.:28.00   3rd Qu.:27.00   3rd Qu.:19.00   3rd Qu.:69.00  \n Max.   :30.00   Max.   :30.00   Max.   :24.00   Max.   :84.00  \n NA's   :1                                                      \n     BAARS            ADHD             PHQ              Sex        \n Min.   :18.00   Min.   :0.0000   Min.   : 0.000   Min.   :0.0000  \n 1st Qu.:29.00   1st Qu.:0.0000   1st Qu.: 6.000   1st Qu.:0.0000  \n Median :35.00   Median :0.0000   Median : 9.000   Median :1.0000  \n Mean   :36.75   Mean   :0.2876   Mean   : 9.778   Mean   :0.6993  \n 3rd Qu.:45.00   3rd Qu.:1.0000   3rd Qu.:14.000   3rd Qu.:1.0000  \n Max.   :68.00   Max.   :1.0000   Max.   :27.000   Max.   :2.0000  \n                                                                   \n      Age        SpokenLanguages   Education    \n Min.   :18.00   Min.   :1.000   Min.   :12.00  \n 1st Qu.:18.00   1st Qu.:2.000   1st Qu.:13.00  \n Median :19.00   Median :2.000   Median :13.50  \n Mean   :20.08   Mean   :2.327   Mean   :14.25  \n 3rd Qu.:20.00   3rd Qu.:3.000   3rd Qu.:15.00  \n Max.   :38.00   Max.   :5.000   Max.   :19.00  \n                                                \n\nhist(ProjectData$BAARS)\n\n\n\n\n\n\n\n#39+ for diagnosis\n\n\n#Sample Size\nProjectData %&gt;% summarise(n = n())\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1   153\n\n########################################################################################\n#Question 1: What factors best predict the ADHD diagnosis? \n########################################################################################\n\n#Variables to keep\nProjectData.K&lt;-ProjectData %&gt;% select(Participant, L2, SRT, DM, WM, BAARS, ADHD, PHQ, Sex, Age, SpokenLanguages, Education)\nsummary(ProjectData.K)\n\n  Participant         L2              SRT                DM           \n Min.   :4201   Min.   :0.2200   Min.   :-0.2000   Min.   :-2.489000  \n 1st Qu.:4317   1st Qu.:0.5000   1st Qu.: 0.0400   1st Qu.:-0.481000  \n Median :4401   Median :0.6100   Median : 0.0900   Median : 0.089000  \n Mean   :4407   Mean   :0.5948   Mean   : 0.0851   Mean   :-0.001092  \n 3rd Qu.:4503   3rd Qu.:0.6700   3rd Qu.: 0.1300   3rd Qu.: 0.519000  \n Max.   :4603   Max.   :1.0000   Max.   : 0.3700   Max.   : 1.485000  \n       WM            BAARS            ADHD             PHQ        \n Min.   : 9.00   Min.   :18.00   Min.   :0.0000   Min.   : 0.000  \n 1st Qu.:51.00   1st Qu.:29.00   1st Qu.:0.0000   1st Qu.: 6.000  \n Median :63.00   Median :35.00   Median :0.0000   Median : 9.000  \n Mean   :58.71   Mean   :36.75   Mean   :0.2876   Mean   : 9.778  \n 3rd Qu.:69.00   3rd Qu.:45.00   3rd Qu.:1.0000   3rd Qu.:14.000  \n Max.   :84.00   Max.   :68.00   Max.   :1.0000   Max.   :27.000  \n      Sex              Age        SpokenLanguages   Education    \n Min.   :0.0000   Min.   :18.00   Min.   :1.000   Min.   :12.00  \n 1st Qu.:0.0000   1st Qu.:18.00   1st Qu.:2.000   1st Qu.:13.00  \n Median :1.0000   Median :19.00   Median :2.000   Median :13.50  \n Mean   :0.6993   Mean   :20.08   Mean   :2.327   Mean   :14.25  \n 3rd Qu.:1.0000   3rd Qu.:20.00   3rd Qu.:3.000   3rd Qu.:15.00  \n Max.   :2.0000   Max.   :38.00   Max.   :5.000   Max.   :19.00  \n\nProjectData.K$Participant &lt;- as.factor(ProjectData.K$Participant)\n\nProjectData.K$ADHD[ProjectData.K$ADHD == 1] &lt;- \"adhd\"\nProjectData.K$ADHD[ProjectData.K$ADHD == 0] &lt;- \"no_adhd\"\nProjectData.K$ADHD &lt;- as.factor(ProjectData.K$ADHD)\n\ntable(ProjectData.K$ADHD)\n\n\n   adhd no_adhd \n     44     109 \n\n## Split   \nset.seed(666)  # For reproducibility\n\n# 75% of data will go into training\ntrain_idx &lt;- createDataPartition(ProjectData.K$ADHD, p = 0.75, list = FALSE)\n\n# Create training and test datasets\ntrain_data_ADHD_Status &lt;- ProjectData.K[train_idx, ]\ntest_data_ADHD_Status  &lt;- ProjectData.K[-train_idx, ]\n\ntable(train_data_ADHD_Status$ADHD)\n\n\n   adhd no_adhd \n     33      82 \n\ntable(test_data_ADHD_Status$ADHD)\n\n\n   adhd no_adhd \n     11      27 \n\nprop.table(table(train_data_ADHD_Status$ADHD))\n\n\n     adhd   no_adhd \n0.2869565 0.7130435 \n\nprop.table(table(test_data_ADHD_Status$ADHD))\n\n\n     adhd   no_adhd \n0.2894737 0.7105263 \n\n##############################################################\n#########Set up all models ###################################\n##############################################################\n# Set up cross-validation using ROC as the metric\nBI_cv_control &lt;- trainControl(\n  method = \"cv\", #trained on 9, validated on 1\n  number = 10, #split data into 10 folds\n  # summaryFunction = prSummary,   # Use caret’s prSummary for binary classification for AUC\n  # summaryFunction = twoClassSummary,   # Use caret’s twoClassSummary for binary classification for ROC metric\n  # summaryFunction = defaultSummary,   # Use caret’s defaultSummary for binary classification for accuracy\n  summaryFunction = multiClassSummary,   # multiClassSummary returns Mean_Balanced_Accuracy\n  classProbs = TRUE,\n  allowParallel = TRUE,\n  savePredictions = \"final\"\n)\n\n# Setup parallel processing\ncl &lt;- makePSOCKcluster(detectCores())\nregisterDoParallel(cl)\n\n# Train binary models for group 0 (using base predictors)\nmodels.binary_ADHD_1 &lt;- caretList(\n  ADHD ~ SRT+DM+WM+PHQ+Sex+Age+Education,\n  data = train_data_ADHD_Status,\n  trControl = BI_cv_control,\n  #metric = \"AUC\",\n  metric = \"Mean_Balanced_Accuracy\",\n  tuneList = list(\n    # Logistic regression for binary classification\n    Logit = caretModelSpec(\n      method = \"glm\",\n      preProcess = c(\"center\", \"scale\"),\n      family = \"binomial\"\n    ),\n    # Lasso using glmnet with family binomial\n    Lasso = caretModelSpec(\n      method = \"glmnet\",\n      preProcess = c(\"center\", \"scale\"),\n      tuneGrid = expand.grid(alpha = 1, lambda = seq(0.005, 0.1, 0.005)),\n      family = \"binomial\"\n    ),\n    # Linear Discriminant Analysis\n    LDA = caretModelSpec(\n      method = \"lda\",\n      preProcess = c(\"center\", \"scale\")\n    ),\n    # Quadratic Discriminant Analysis\n    QDA = caretModelSpec(\n      method = \"qda\",\n      preProcess = c(\"center\", \"scale\")\n    ),\n    # Random Forest model\n    RF = caretModelSpec(\n      method = \"rf\",\n      preProcess = c(\"center\", \"scale\"),\n      tuneGrid = expand.grid(mtry = seq(1, 10, 1)),\n      ntree = 1000,\n      importance = TRUE\n    ),\n    # XGBoost model for classification\n    XGBOOST = caretModelSpec(\n      method = \"xgbTree\",\n      preProcess = c(\"center\", \"scale\"),\n      verbosity = 0,\n      tuneGrid = expand.grid(\n        nrounds = 20,\n        max_depth = 3, \n        eta = 0.3,\n        gamma = seq(0.1, 0.3, 0.05),\n        colsample_bytree = 1,\n        min_child_weight = 1,\n        subsample = seq(0.7, 0.8, 0.05)\n      )\n    )\n  )\n)\n\n\n# Train binary models for group 1 (adding language info)\nmodels.binary_ADHD_2 &lt;- caretList(\n  ADHD ~ SRT+DM+WM+PHQ+Sex+Age+Education+L2+SpokenLanguages,\n  data = train_data_ADHD_Status,\n  trControl = BI_cv_control,\n  #metric = \"AUC\",\n  metric = \"Mean_Balanced_Accuracy\",\n  tuneList = list(\n    # Logistic regression for binary classification\n    Logit = caretModelSpec(\n      method = \"glm\",\n      preProcess = c(\"center\", \"scale\"),\n      family = \"binomial\"\n    ),\n    # Lasso using glmnet with family binomial\n    Lasso = caretModelSpec(\n      method = \"glmnet\",\n      preProcess = c(\"center\", \"scale\"),\n      tuneGrid = expand.grid(alpha = 1, lambda = seq(0.005, 0.1, 0.005)),\n      family = \"binomial\"\n    ),\n    # Linear Discriminant Analysis\n    LDA = caretModelSpec(\n      method = \"lda\",\n      preProcess = c(\"center\", \"scale\")\n    ),\n    # Quadratic Discriminant Analysis\n    QDA = caretModelSpec(\n      method = \"qda\",\n      preProcess = c(\"center\", \"scale\")\n    ),\n    # Random Forest model\n    RF = caretModelSpec(\n      method = \"rf\",\n      preProcess = c(\"center\", \"scale\"),\n      tuneGrid = expand.grid(mtry = seq(1, 10, 1)),\n      ntree = 1000,\n      importance = TRUE\n    ),\n    # XGBoost model for classification\n    XGBOOST = caretModelSpec(\n      method = \"xgbTree\",\n      preProcess = c(\"center\", \"scale\"),\n      verbosity = 0,\n      tuneGrid = expand.grid(\n        nrounds = 20,\n        max_depth = 3, \n        eta = 0.3,\n        gamma = seq(0.1, 0.3, 0.05),\n        colsample_bytree = 1,\n        min_child_weight = 1,\n        subsample = seq(0.7, 0.8, 0.05)\n      )\n    )\n  )\n)\n\n\n# Train binary models for group 2 (adding BAARS survey)\nmodels.binary_ADHD_3 &lt;- caretList(\n  ADHD ~ SRT+DM+WM+PHQ+Sex+Age+Education+L2+SpokenLanguages+BAARS,\n  data = train_data_ADHD_Status,\n  trControl = BI_cv_control,\n  #metric = \"AUC\",\n  metric = \"Mean_Balanced_Accuracy\",\n  tuneList = list(\n    # Logistic regression for binary classification\n    Logit = caretModelSpec(\n      method = \"glm\",\n      preProcess = c(\"center\", \"scale\"),\n      family = \"binomial\"\n    ),\n    # Lasso using glmnet with family binomial\n    Lasso = caretModelSpec(\n      method = \"glmnet\",\n      preProcess = c(\"center\", \"scale\"),\n      tuneGrid = expand.grid(alpha = 1, lambda = seq(0.005, 0.1, 0.005)),\n      family = \"binomial\"\n    ),\n    # Linear Discriminant Analysis\n    LDA = caretModelSpec(\n      method = \"lda\",\n      preProcess = c(\"center\", \"scale\")\n    ),\n    # Quadratic Discriminant Analysis\n    QDA = caretModelSpec(\n      method = \"qda\",\n      preProcess = c(\"center\", \"scale\")\n    ),\n    # Random Forest model\n    RF = caretModelSpec(\n      method = \"rf\",\n      preProcess = c(\"center\", \"scale\"),\n      tuneGrid = expand.grid(mtry = seq(1, 10, 1)),\n      ntree = 1000,\n      importance = TRUE\n    ),\n    # XGBoost model for classification\n    XGBOOST = caretModelSpec(\n      method = \"xgbTree\",\n      preProcess = c(\"center\", \"scale\"),\n      verbosity = 0,\n      tuneGrid = expand.grid(\n        nrounds = 20,\n        max_depth = 3, \n        eta = 0.3,\n        gamma = seq(0.1, 0.3, 0.05),\n        colsample_bytree = 1,\n        min_child_weight = 1,\n        subsample = seq(0.7, 0.8, 0.05)\n      )\n    )\n  )\n)\n\n\n# Stop parallel processing when finished\nstopCluster(cl)\n\n# Compare resampling results across all binary models\nresults.binary.ADHD_1 &lt;- resamples(models.binary_ADHD_1)\nresults.binary.ADHD_2 &lt;- resamples(models.binary_ADHD_2)\nresults.binary.ADHD_3 &lt;- resamples(models.binary_ADHD_3)\nbwplot(results.binary.ADHD_1, scales = list(x = list(relation = \"free\"), y = list(relation = \"free\")))\n\n\n\n\n\n\n\nbwplot(results.binary.ADHD_2, scales = list(x = list(relation = \"free\"), y = list(relation = \"free\")))\n\n\n\n\n\n\n\nbwplot(results.binary.ADHD_3, scales = list(x = list(relation = \"free\"), y = list(relation = \"free\")))\n\n\n\n\n\n\n\n# Helper function to extract confusion matrices for a given model list\nextract_CM &lt;- function(model_list, train_data, test_data, response_col) {\n  # Loop over models in the list and compute confusion matrices\n  cm_train &lt;- lapply(model_list, function(mod) {\n    confusionMatrix(\n      predict(mod, newdata = train_data),\n      reference = train_data[[response_col]]\n    )\n  })\n  \n  cm_test &lt;- lapply(model_list, function(mod) {\n    confusionMatrix(\n      predict(mod, newdata = test_data),\n      reference = test_data[[response_col]]\n    )\n  })\n  \n  # Return a list containing both training and testing confusion matrices\n  list(Train = cm_train, Test = cm_test)\n}\n\n# Extract confusion matrices for each group\nCM.models.binary_ADHD_1 &lt;- extract_CM(models.binary_ADHD_1, train_data_ADHD_Status, test_data_ADHD_Status, \"ADHD\")\nCM.models.binary_ADHD_2 &lt;- extract_CM(models.binary_ADHD_2, train_data_ADHD_Status, test_data_ADHD_Status, \"ADHD\")\nCM.models.binary_ADHD_3 &lt;- extract_CM(models.binary_ADHD_3, train_data_ADHD_Status, test_data_ADHD_Status, \"ADHD\")\n\n# Optionally, print all confusion matrices for each group and each model\nprint_confusion_matrices &lt;- function(cm_list, group_name) {\n  cat(\"\\n--- Confusion Matrices for\", group_name, \"---\\n\")\n  for(model_name in names(cm_list$Train)) {\n    cat(\"\\nModel:\", model_name, \"\\n\")\n    cat(\"Training Data:\\n\")\n    print(cm_list$Train[[model_name]])\n    cat(\"\\nTesting Data:\\n\")\n    print(cm_list$Test[[model_name]])\n    cat(\"\\n-------------------------------\\n\")\n  }\n}\n\n# Print confusion matrices for each group\nprint_confusion_matrices(CM.models.binary_ADHD_1, \"models.binary_ADHD_1\")\n\n\n--- Confusion Matrices for models.binary_ADHD_1 ---\n\nModel: Logit \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      11       7\n   no_adhd   22      75\n                                          \n               Accuracy : 0.7478          \n                 95% CI : (0.6583, 0.8242)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.23754         \n                                          \n                  Kappa : 0.2869          \n                                          \n Mcnemar's Test P-Value : 0.00933         \n                                          \n            Sensitivity : 0.33333         \n            Specificity : 0.91463         \n         Pos Pred Value : 0.61111         \n         Neg Pred Value : 0.77320         \n             Prevalence : 0.28696         \n         Detection Rate : 0.09565         \n   Detection Prevalence : 0.15652         \n      Balanced Accuracy : 0.62398         \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       6       2\n   no_adhd    5      25\n                                          \n               Accuracy : 0.8158          \n                 95% CI : (0.6567, 0.9226)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1020          \n                                          \n                  Kappa : 0.5128          \n                                          \n Mcnemar's Test P-Value : 0.4497          \n                                          \n            Sensitivity : 0.5455          \n            Specificity : 0.9259          \n         Pos Pred Value : 0.7500          \n         Neg Pred Value : 0.8333          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1579          \n   Detection Prevalence : 0.2105          \n      Balanced Accuracy : 0.7357          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: Lasso \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       9       2\n   no_adhd   24      80\n                                          \n               Accuracy : 0.7739          \n                 95% CI : (0.6865, 0.8467)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.08794         \n                                          \n                  Kappa : 0.3101          \n                                          \n Mcnemar's Test P-Value : 3.814e-05       \n                                          \n            Sensitivity : 0.27273         \n            Specificity : 0.97561         \n         Pos Pred Value : 0.81818         \n         Neg Pred Value : 0.76923         \n             Prevalence : 0.28696         \n         Detection Rate : 0.07826         \n   Detection Prevalence : 0.09565         \n      Balanced Accuracy : 0.62417         \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       3       1\n   no_adhd    8      26\n                                          \n               Accuracy : 0.7632          \n                 95% CI : (0.5976, 0.8856)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.3025          \n                                          \n                  Kappa : 0.2905          \n                                          \n Mcnemar's Test P-Value : 0.0455          \n                                          \n            Sensitivity : 0.27273         \n            Specificity : 0.96296         \n         Pos Pred Value : 0.75000         \n         Neg Pred Value : 0.76471         \n             Prevalence : 0.28947         \n         Detection Rate : 0.07895         \n   Detection Prevalence : 0.10526         \n      Balanced Accuracy : 0.61785         \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: LDA \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      12       6\n   no_adhd   21      76\n                                          \n               Accuracy : 0.7652          \n                 95% CI : (0.6771, 0.8392)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.127394        \n                                          \n                  Kappa : 0.3361          \n                                          \n Mcnemar's Test P-Value : 0.007054        \n                                          \n            Sensitivity : 0.3636          \n            Specificity : 0.9268          \n         Pos Pred Value : 0.6667          \n         Neg Pred Value : 0.7835          \n             Prevalence : 0.2870          \n         Detection Rate : 0.1043          \n   Detection Prevalence : 0.1565          \n      Balanced Accuracy : 0.6452          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       5       2\n   no_adhd    6      25\n                                          \n               Accuracy : 0.7895          \n                 95% CI : (0.6268, 0.9045)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1870          \n                                          \n                  Kappa : 0.4264          \n                                          \n Mcnemar's Test P-Value : 0.2888          \n                                          \n            Sensitivity : 0.4545          \n            Specificity : 0.9259          \n         Pos Pred Value : 0.7143          \n         Neg Pred Value : 0.8065          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1316          \n   Detection Prevalence : 0.1842          \n      Balanced Accuracy : 0.6902          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: QDA \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      18       6\n   no_adhd   15      76\n                                          \n               Accuracy : 0.8174          \n                 95% CI : (0.7345, 0.8833)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.007019        \n                                          \n                  Kappa : 0.5142          \n                                          \n Mcnemar's Test P-Value : 0.080856        \n                                          \n            Sensitivity : 0.5455          \n            Specificity : 0.9268          \n         Pos Pred Value : 0.7500          \n         Neg Pred Value : 0.8352          \n             Prevalence : 0.2870          \n         Detection Rate : 0.1565          \n   Detection Prevalence : 0.2087          \n      Balanced Accuracy : 0.7361          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       5       4\n   no_adhd    6      23\n                                        \n               Accuracy : 0.7368        \n                 95% CI : (0.569, 0.866)\n    No Information Rate : 0.7105        \n    P-Value [Acc &gt; NIR] : 0.4389        \n                                        \n                  Kappa : 0.3238        \n                                        \n Mcnemar's Test P-Value : 0.7518        \n                                        \n            Sensitivity : 0.4545        \n            Specificity : 0.8519        \n         Pos Pred Value : 0.5556        \n         Neg Pred Value : 0.7931        \n             Prevalence : 0.2895        \n         Detection Rate : 0.1316        \n   Detection Prevalence : 0.2368        \n      Balanced Accuracy : 0.6532        \n                                        \n       'Positive' Class : adhd          \n                                        \n\n-------------------------------\n\nModel: RF \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      32       0\n   no_adhd    1      82\n                                          \n               Accuracy : 0.9913          \n                 95% CI : (0.9525, 0.9998)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 6.068e-16       \n                                          \n                  Kappa : 0.9786          \n                                          \n Mcnemar's Test P-Value : 1               \n                                          \n            Sensitivity : 0.9697          \n            Specificity : 1.0000          \n         Pos Pred Value : 1.0000          \n         Neg Pred Value : 0.9880          \n             Prevalence : 0.2870          \n         Detection Rate : 0.2783          \n   Detection Prevalence : 0.2783          \n      Balanced Accuracy : 0.9848          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       2       0\n   no_adhd    9      27\n                                          \n               Accuracy : 0.7632          \n                 95% CI : (0.5976, 0.8856)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.302491        \n                                          \n                  Kappa : 0.24            \n                                          \n Mcnemar's Test P-Value : 0.007661        \n                                          \n            Sensitivity : 0.18182         \n            Specificity : 1.00000         \n         Pos Pred Value : 1.00000         \n         Neg Pred Value : 0.75000         \n             Prevalence : 0.28947         \n         Detection Rate : 0.05263         \n   Detection Prevalence : 0.05263         \n      Balanced Accuracy : 0.59091         \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: XGBOOST \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      27       1\n   no_adhd    6      81\n                                          \n               Accuracy : 0.9391          \n                 95% CI : (0.8786, 0.9752)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 1.138e-09       \n                                          \n                  Kappa : 0.8442          \n                                          \n Mcnemar's Test P-Value : 0.1306          \n                                          \n            Sensitivity : 0.8182          \n            Specificity : 0.9878          \n         Pos Pred Value : 0.9643          \n         Neg Pred Value : 0.9310          \n             Prevalence : 0.2870          \n         Detection Rate : 0.2348          \n   Detection Prevalence : 0.2435          \n      Balanced Accuracy : 0.9030          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       4       8\n   no_adhd    7      19\n                                          \n               Accuracy : 0.6053          \n                 95% CI : (0.4339, 0.7596)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.9428          \n                                          \n                  Kappa : 0.0656          \n                                          \n Mcnemar's Test P-Value : 1.0000          \n                                          \n            Sensitivity : 0.3636          \n            Specificity : 0.7037          \n         Pos Pred Value : 0.3333          \n         Neg Pred Value : 0.7308          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1053          \n   Detection Prevalence : 0.3158          \n      Balanced Accuracy : 0.5337          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nprint_confusion_matrices(CM.models.binary_ADHD_2, \"models.binary_ADHD_2\")\n\n\n--- Confusion Matrices for models.binary_ADHD_2 ---\n\nModel: Logit \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      11       7\n   no_adhd   22      75\n                                          \n               Accuracy : 0.7478          \n                 95% CI : (0.6583, 0.8242)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.23754         \n                                          \n                  Kappa : 0.2869          \n                                          \n Mcnemar's Test P-Value : 0.00933         \n                                          \n            Sensitivity : 0.33333         \n            Specificity : 0.91463         \n         Pos Pred Value : 0.61111         \n         Neg Pred Value : 0.77320         \n             Prevalence : 0.28696         \n         Detection Rate : 0.09565         \n   Detection Prevalence : 0.15652         \n      Balanced Accuracy : 0.62398         \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       6       2\n   no_adhd    5      25\n                                          \n               Accuracy : 0.8158          \n                 95% CI : (0.6567, 0.9226)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1020          \n                                          \n                  Kappa : 0.5128          \n                                          \n Mcnemar's Test P-Value : 0.4497          \n                                          \n            Sensitivity : 0.5455          \n            Specificity : 0.9259          \n         Pos Pred Value : 0.7500          \n         Neg Pred Value : 0.8333          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1579          \n   Detection Prevalence : 0.2105          \n      Balanced Accuracy : 0.7357          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: Lasso \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       8       2\n   no_adhd   25      80\n                                          \n               Accuracy : 0.7652          \n                 95% CI : (0.6771, 0.8392)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.1274          \n                                          \n                  Kappa : 0.2754          \n                                          \n Mcnemar's Test P-Value : 2.297e-05       \n                                          \n            Sensitivity : 0.24242         \n            Specificity : 0.97561         \n         Pos Pred Value : 0.80000         \n         Neg Pred Value : 0.76190         \n             Prevalence : 0.28696         \n         Detection Rate : 0.06957         \n   Detection Prevalence : 0.08696         \n      Balanced Accuracy : 0.60902         \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       3       0\n   no_adhd    8      27\n                                          \n               Accuracy : 0.7895          \n                 95% CI : (0.6268, 0.9045)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.18701         \n                                          \n                  Kappa : 0.3476          \n                                          \n Mcnemar's Test P-Value : 0.01333         \n                                          \n            Sensitivity : 0.27273         \n            Specificity : 1.00000         \n         Pos Pred Value : 1.00000         \n         Neg Pred Value : 0.77143         \n             Prevalence : 0.28947         \n         Detection Rate : 0.07895         \n   Detection Prevalence : 0.07895         \n      Balanced Accuracy : 0.63636         \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: LDA \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      11       4\n   no_adhd   22      78\n                                          \n               Accuracy : 0.7739          \n                 95% CI : (0.6865, 0.8467)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.0879394       \n                                          \n                  Kappa : 0.34            \n                                          \n Mcnemar's Test P-Value : 0.0008561       \n                                          \n            Sensitivity : 0.33333         \n            Specificity : 0.95122         \n         Pos Pred Value : 0.73333         \n         Neg Pred Value : 0.78000         \n             Prevalence : 0.28696         \n         Detection Rate : 0.09565         \n   Detection Prevalence : 0.13043         \n      Balanced Accuracy : 0.64228         \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       6       2\n   no_adhd    5      25\n                                          \n               Accuracy : 0.8158          \n                 95% CI : (0.6567, 0.9226)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1020          \n                                          \n                  Kappa : 0.5128          \n                                          \n Mcnemar's Test P-Value : 0.4497          \n                                          \n            Sensitivity : 0.5455          \n            Specificity : 0.9259          \n         Pos Pred Value : 0.7500          \n         Neg Pred Value : 0.8333          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1579          \n   Detection Prevalence : 0.2105          \n      Balanced Accuracy : 0.7357          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: QDA \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      20       5\n   no_adhd   13      77\n                                         \n               Accuracy : 0.8435         \n                 95% CI : (0.764, 0.9045)\n    No Information Rate : 0.713          \n    P-Value [Acc &gt; NIR] : 0.0008276      \n                                         \n                  Kappa : 0.5876         \n                                         \n Mcnemar's Test P-Value : 0.0989602      \n                                         \n            Sensitivity : 0.6061         \n            Specificity : 0.9390         \n         Pos Pred Value : 0.8000         \n         Neg Pred Value : 0.8556         \n             Prevalence : 0.2870         \n         Detection Rate : 0.1739         \n   Detection Prevalence : 0.2174         \n      Balanced Accuracy : 0.7725         \n                                         \n       'Positive' Class : adhd           \n                                         \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       5       3\n   no_adhd    6      24\n                                          \n               Accuracy : 0.7632          \n                 95% CI : (0.5976, 0.8856)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.3025          \n                                          \n                  Kappa : 0.3736          \n                                          \n Mcnemar's Test P-Value : 0.5050          \n                                          \n            Sensitivity : 0.4545          \n            Specificity : 0.8889          \n         Pos Pred Value : 0.6250          \n         Neg Pred Value : 0.8000          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1316          \n   Detection Prevalence : 0.2105          \n      Balanced Accuracy : 0.6717          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: RF \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      33       0\n   no_adhd    0      82\n                                     \n               Accuracy : 1          \n                 95% CI : (0.9684, 1)\n    No Information Rate : 0.713      \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16  \n                                     \n                  Kappa : 1          \n                                     \n Mcnemar's Test P-Value : NA         \n                                     \n            Sensitivity : 1.000      \n            Specificity : 1.000      \n         Pos Pred Value : 1.000      \n         Neg Pred Value : 1.000      \n             Prevalence : 0.287      \n         Detection Rate : 0.287      \n   Detection Prevalence : 0.287      \n      Balanced Accuracy : 1.000      \n                                     \n       'Positive' Class : adhd       \n                                     \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       1       1\n   no_adhd   10      26\n                                         \n               Accuracy : 0.7105         \n                 95% CI : (0.541, 0.8458)\n    No Information Rate : 0.7105         \n    P-Value [Acc &gt; NIR] : 0.58043        \n                                         \n                  Kappa : 0.0711         \n                                         \n Mcnemar's Test P-Value : 0.01586        \n                                         \n            Sensitivity : 0.09091        \n            Specificity : 0.96296        \n         Pos Pred Value : 0.50000        \n         Neg Pred Value : 0.72222        \n             Prevalence : 0.28947        \n         Detection Rate : 0.02632        \n   Detection Prevalence : 0.05263        \n      Balanced Accuracy : 0.52694        \n                                         \n       'Positive' Class : adhd           \n                                         \n\n-------------------------------\n\nModel: XGBOOST \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      26       3\n   no_adhd    7      79\n                                          \n               Accuracy : 0.913           \n                 95% CI : (0.8459, 0.9575)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 1.379e-07       \n                                          \n                  Kappa : 0.7795          \n                                          \n Mcnemar's Test P-Value : 0.3428          \n                                          \n            Sensitivity : 0.7879          \n            Specificity : 0.9634          \n         Pos Pred Value : 0.8966          \n         Neg Pred Value : 0.9186          \n             Prevalence : 0.2870          \n         Detection Rate : 0.2261          \n   Detection Prevalence : 0.2522          \n      Balanced Accuracy : 0.8756          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       5       6\n   no_adhd    6      21\n                                         \n               Accuracy : 0.6842         \n                 95% CI : (0.5135, 0.825)\n    No Information Rate : 0.7105         \n    P-Value [Acc &gt; NIR] : 0.7101         \n                                         \n                  Kappa : 0.2323         \n                                         \n Mcnemar's Test P-Value : 1.0000         \n                                         \n            Sensitivity : 0.4545         \n            Specificity : 0.7778         \n         Pos Pred Value : 0.4545         \n         Neg Pred Value : 0.7778         \n             Prevalence : 0.2895         \n         Detection Rate : 0.1316         \n   Detection Prevalence : 0.2895         \n      Balanced Accuracy : 0.6162         \n                                         \n       'Positive' Class : adhd           \n                                         \n\n-------------------------------\n\nprint_confusion_matrices(CM.models.binary_ADHD_3, \"models.binary_ADHD_3\")\n\n\n--- Confusion Matrices for models.binary_ADHD_3 ---\n\nModel: Logit \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      21       4\n   no_adhd   12      78\n                                          \n               Accuracy : 0.8609          \n                 95% CI : (0.7839, 0.9183)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.0001471       \n                                          \n                  Kappa : 0.6335          \n                                          \n Mcnemar's Test P-Value : 0.0801183       \n                                          \n            Sensitivity : 0.6364          \n            Specificity : 0.9512          \n         Pos Pred Value : 0.8400          \n         Neg Pred Value : 0.8667          \n             Prevalence : 0.2870          \n         Detection Rate : 0.1826          \n   Detection Prevalence : 0.2174          \n      Balanced Accuracy : 0.7938          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       8       6\n   no_adhd    3      21\n                                          \n               Accuracy : 0.7632          \n                 95% CI : (0.5976, 0.8856)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.3025          \n                                          \n                  Kappa : 0.4673          \n                                          \n Mcnemar's Test P-Value : 0.5050          \n                                          \n            Sensitivity : 0.7273          \n            Specificity : 0.7778          \n         Pos Pred Value : 0.5714          \n         Neg Pred Value : 0.8750          \n             Prevalence : 0.2895          \n         Detection Rate : 0.2105          \n   Detection Prevalence : 0.3684          \n      Balanced Accuracy : 0.7525          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: Lasso \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      18       5\n   no_adhd   15      77\n                                          \n               Accuracy : 0.8261          \n                 95% CI : (0.7443, 0.8904)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.003642        \n                                          \n                  Kappa : 0.5327          \n                                          \n Mcnemar's Test P-Value : 0.044171        \n                                          \n            Sensitivity : 0.5455          \n            Specificity : 0.9390          \n         Pos Pred Value : 0.7826          \n         Neg Pred Value : 0.8370          \n             Prevalence : 0.2870          \n         Detection Rate : 0.1565          \n   Detection Prevalence : 0.2000          \n      Balanced Accuracy : 0.7422          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       9       5\n   no_adhd    2      22\n                                          \n               Accuracy : 0.8158          \n                 95% CI : (0.6567, 0.9226)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1020          \n                                          \n                  Kappa : 0.5857          \n                                          \n Mcnemar's Test P-Value : 0.4497          \n                                          \n            Sensitivity : 0.8182          \n            Specificity : 0.8148          \n         Pos Pred Value : 0.6429          \n         Neg Pred Value : 0.9167          \n             Prevalence : 0.2895          \n         Detection Rate : 0.2368          \n   Detection Prevalence : 0.3684          \n      Balanced Accuracy : 0.8165          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: LDA \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      20       3\n   no_adhd   13      79\n                                          \n               Accuracy : 0.8609          \n                 95% CI : (0.7839, 0.9183)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 0.0001471       \n                                          \n                  Kappa : 0.6262          \n                                          \n Mcnemar's Test P-Value : 0.0244489       \n                                          \n            Sensitivity : 0.6061          \n            Specificity : 0.9634          \n         Pos Pred Value : 0.8696          \n         Neg Pred Value : 0.8587          \n             Prevalence : 0.2870          \n         Detection Rate : 0.1739          \n   Detection Prevalence : 0.2000          \n      Balanced Accuracy : 0.7847          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       8       5\n   no_adhd    3      22\n                                          \n               Accuracy : 0.7895          \n                 95% CI : (0.6268, 0.9045)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1870          \n                                          \n                  Kappa : 0.5144          \n                                          \n Mcnemar's Test P-Value : 0.7237          \n                                          \n            Sensitivity : 0.7273          \n            Specificity : 0.8148          \n         Pos Pred Value : 0.6154          \n         Neg Pred Value : 0.8800          \n             Prevalence : 0.2895          \n         Detection Rate : 0.2105          \n   Detection Prevalence : 0.3421          \n      Balanced Accuracy : 0.7710          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: QDA \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      24       5\n   no_adhd    9      77\n                                          \n               Accuracy : 0.8783          \n                 95% CI : (0.8042, 0.9318)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 1.988e-05       \n                                          \n                  Kappa : 0.6913          \n                                          \n Mcnemar's Test P-Value : 0.4227          \n                                          \n            Sensitivity : 0.7273          \n            Specificity : 0.9390          \n         Pos Pred Value : 0.8276          \n         Neg Pred Value : 0.8953          \n             Prevalence : 0.2870          \n         Detection Rate : 0.2087          \n   Detection Prevalence : 0.2522          \n      Balanced Accuracy : 0.8331          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       7       6\n   no_adhd    4      21\n                                        \n               Accuracy : 0.7368        \n                 95% CI : (0.569, 0.866)\n    No Information Rate : 0.7105        \n    P-Value [Acc &gt; NIR] : 0.4389        \n                                        \n                  Kappa : 0.393         \n                                        \n Mcnemar's Test P-Value : 0.7518        \n                                        \n            Sensitivity : 0.6364        \n            Specificity : 0.7778        \n         Pos Pred Value : 0.5385        \n         Neg Pred Value : 0.8400        \n             Prevalence : 0.2895        \n         Detection Rate : 0.1842        \n   Detection Prevalence : 0.3421        \n      Balanced Accuracy : 0.7071        \n                                        \n       'Positive' Class : adhd          \n                                        \n\n-------------------------------\n\nModel: RF \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      33       0\n   no_adhd    0      82\n                                     \n               Accuracy : 1          \n                 95% CI : (0.9684, 1)\n    No Information Rate : 0.713      \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16  \n                                     \n                  Kappa : 1          \n                                     \n Mcnemar's Test P-Value : NA         \n                                     \n            Sensitivity : 1.000      \n            Specificity : 1.000      \n         Pos Pred Value : 1.000      \n         Neg Pred Value : 1.000      \n             Prevalence : 0.287      \n         Detection Rate : 0.287      \n   Detection Prevalence : 0.287      \n      Balanced Accuracy : 1.000      \n                                     \n       'Positive' Class : adhd       \n                                     \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       7       4\n   no_adhd    4      23\n                                          \n               Accuracy : 0.7895          \n                 95% CI : (0.6268, 0.9045)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.187           \n                                          \n                  Kappa : 0.4882          \n                                          \n Mcnemar's Test P-Value : 1.000           \n                                          \n            Sensitivity : 0.6364          \n            Specificity : 0.8519          \n         Pos Pred Value : 0.6364          \n         Neg Pred Value : 0.8519          \n             Prevalence : 0.2895          \n         Detection Rate : 0.1842          \n   Detection Prevalence : 0.2895          \n      Balanced Accuracy : 0.7441          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\nModel: XGBOOST \nTraining Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd      30       0\n   no_adhd    3      82\n                                          \n               Accuracy : 0.9739          \n                 95% CI : (0.9257, 0.9946)\n    No Information Rate : 0.713           \n    P-Value [Acc &gt; NIR] : 2.208e-13       \n                                          \n                  Kappa : 0.9345          \n                                          \n Mcnemar's Test P-Value : 0.2482          \n                                          \n            Sensitivity : 0.9091          \n            Specificity : 1.0000          \n         Pos Pred Value : 1.0000          \n         Neg Pred Value : 0.9647          \n             Prevalence : 0.2870          \n         Detection Rate : 0.2609          \n   Detection Prevalence : 0.2609          \n      Balanced Accuracy : 0.9545          \n                                          \n       'Positive' Class : adhd            \n                                          \n\nTesting Data:\nConfusion Matrix and Statistics\n\n          Reference\nPrediction adhd no_adhd\n   adhd       9       6\n   no_adhd    2      21\n                                          \n               Accuracy : 0.7895          \n                 95% CI : (0.6268, 0.9045)\n    No Information Rate : 0.7105          \n    P-Value [Acc &gt; NIR] : 0.1870          \n                                          \n                  Kappa : 0.538           \n                                          \n Mcnemar's Test P-Value : 0.2888          \n                                          \n            Sensitivity : 0.8182          \n            Specificity : 0.7778          \n         Pos Pred Value : 0.6000          \n         Neg Pred Value : 0.9130          \n             Prevalence : 0.2895          \n         Detection Rate : 0.2368          \n   Detection Prevalence : 0.3947          \n      Balanced Accuracy : 0.7980          \n                                          \n       'Positive' Class : adhd            \n                                          \n\n-------------------------------\n\n#confusion matrix for RF only\n#CM.models.binary_ADHD_3$Train$RF\n#CM.models.binary_ADHD_3$Test$RF\n\n\n\n\n#RF seems the winner (I do not think that Alex agreed here). \n# Updated helper function to compute Mean_Balanced_Accuracy using multiClassSummary\ncalc_balacc &lt;- function(mod, truth, newdata) {\n  # Get predicted probabilities and predicted class labels\n  prob &lt;- predict(mod, newdata = newdata, type = \"prob\")\n  pred &lt;- predict(mod, newdata = newdata)\n  \n  # Build a data frame with observed values, predictions, and probabilities.\n  # The column names in 'prob' must match the levels in the response factor.\n  df &lt;- data.frame(obs = truth,\n                   pred = pred,\n                   prob)\n  \n  # multiClassSummary computes several metrics including Mean_Balanced_Accuracy.\n  # Note: Even in binary classification, it returns \"Mean_Balanced_Accuracy\".\n  metrics &lt;- multiClassSummary(df, lev = levels(truth), model = mod)\n  metrics[\"Balanced_Accuracy\"]\n}\n\n# Updated evaluation function that computes balanced accuracy on train and test sets\nevaluate_models_balacc &lt;- function(model_list, train_data, test_data, response_col) {\n  train_balacc &lt;- sapply(model_list, function(mod) \n    calc_balacc(mod, truth = train_data[[response_col]], newdata = train_data))\n  \n  test_balacc &lt;- sapply(model_list, function(mod) \n    calc_balacc(mod, truth = test_data[[response_col]], newdata = test_data))\n  \n  data.frame(\n    Model = names(model_list),\n    Train_BalAcc = train_balacc,\n    Test_BalAcc  = test_balacc,\n    Diff = train_balacc - test_balacc,\n    row.names = NULL\n  )\n}\n\n# Example usage for group 1 and group 2 binary models\n\nBI_results1 &lt;- evaluate_models_balacc(\n  model_list = models.binary_ADHD_1,\n  train_data = train_data_ADHD_Status,\n  test_data = test_data_ADHD_Status,\n  response_col = \"ADHD\"\n)\n\nBI_results2 &lt;- evaluate_models_balacc(\n  model_list = models.binary_ADHD_2,\n  train_data = train_data_ADHD_Status,\n  test_data = test_data_ADHD_Status,\n  response_col = \"ADHD\"\n)\n\nBI_results3 &lt;- evaluate_models_balacc(\n  model_list = models.binary_ADHD_3,\n  train_data = train_data_ADHD_Status,\n  test_data = test_data_ADHD_Status,\n  response_col = \"ADHD\"\n)\n\n# Combine the results from the two groups for comparison\nBI_results1$Set &lt;- \"No L2\"\nBI_results2$Set &lt;- \"With L2\"\nBI_results3$Set &lt;- \"BAARS\"\nBI_results_all &lt;- rbind(BI_results1, BI_results2, BI_results3)\n\n# Print the combined balanced accuracy results\nBI_results_all\n\n     Model Train_BalAcc Test_BalAcc         Diff     Set\n1    Logit    0.6239837   0.7356902 -0.111706496   No L2\n2    Lasso    0.6241685   0.6178451  0.006323397   No L2\n3      LDA    0.6452328   0.6902357 -0.045002874   No L2\n4      QDA    0.7361419   0.6531987  0.082943254   No L2\n5       RF    0.9848485   0.5909091  0.393939394   No L2\n6  XGBOOST    0.9029933   0.5336700  0.369323314   No L2\n7    Logit    0.6239837   0.7356902 -0.111706496 With L2\n8    Lasso    0.6090170   0.6363636 -0.027346637 With L2\n9      LDA    0.6422764   0.7356902 -0.093413813 With L2\n10     QDA    0.7725425   0.6717172  0.100825326 With L2\n11      RF    1.0000000   0.5269360  0.473063973 With L2\n12 XGBOOST    0.8756467   0.6161616  0.259485095 With L2\n13   Logit    0.7937916   0.7525253  0.041266322   BAARS\n14   Lasso    0.7422395   0.8164983 -0.074258849   BAARS\n15     LDA    0.7847376   0.7710438  0.013693849   BAARS\n16     QDA    0.8331486   0.7070707  0.126077852   BAARS\n17      RF    1.0000000   0.7441077  0.255892256   BAARS\n18 XGBOOST    0.9545455   0.7979798  0.156565657   BAARS\n\n### SHAP Values for RF\n\n\n# Create a character vector with the names of your selected predictors\nselected_vars &lt;- c(\"L2\", \"SRT\", \"DM\", \"WM\", \"PHQ\", \"Sex\", \"Age\", \n                   \"SpokenLanguages\", \"Education\", \"BAARS\")\n\n# Subset the training data for SHAP analysis\nBI_X_train &lt;- ProjectData[, selected_vars]\n\n# For binary classification, define a prediction wrapper that returns probabilities for the positive class.\npredict_prob_BI &lt;- function(model, newdata) {\n  prob &lt;- predict(model, newdata = newdata, type = \"prob\")\n  prob[, 2]\n}\n\n# Compute SHAP values using fastshap for one of the QDR models\nset.seed(123)  # For reproducibility\n\nBI_shap_vals_RF &lt;- fastshap::explain(\n  object = models.binary_ADHD_2$RF, \n  X = BI_X_train,\n  pred_wrapper = predict_prob_BI,\n  nsim = 50\n)\n\n# Calculate Signed and Absolute Mean SHAP values for each predictor\nBI_signed_mean_RF &lt;- colMeans(BI_shap_vals_RF)\nBI_abs_mean_RF    &lt;- colMeans(abs(BI_shap_vals_RF))\n\n# Combine the SHAP means into a data frame for plotting.\ndf_BI_shap_means &lt;- data.frame(\n  Variable = names(BI_signed_mean_RF),\n  Signed   = BI_signed_mean_RF,\n  Absolute = BI_abs_mean_RF\n)\n\n# Convert to long format for ggplot.\ndf_BI_shap_long &lt;- df_BI_shap_means %&gt;%\n  pivot_longer(cols = c(Signed, Absolute),\n               names_to = \"Metric\",\n               values_to = \"Mean_SHAP\")\n\n# Create a bar plot of the mean SHAP values.\nShap_Means_BI &lt;- ggplot(df_BI_shap_long, aes(x = Variable, y = Mean_SHAP, fill = Metric)) +\n  facet_wrap(~ Metric, scales = \"free\") +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Mean SHAP Values for RF Binary Model\",\n       x = \"Variable\",\n       y = \"Mean SHAP Value\") +\n  coord_flip() +\n  theme_minimal()\n\nShap_Means_BI"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "portfolio",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]